plugins {
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jetbrains.kotlin.kapt' version '1.3.72'
    id "signing"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "maven"
    id "io.zensoft.versioning" version "1.1.0"
}

group = 'io.openfuture'
sourceCompatibility = JavaVersion.VERSION_12

repositories {
    mavenCentral()
}

dependencies {
    // Byte code
    implementation 'org.ow2.asm:asm:7.0'
    implementation 'org.ow2.asm:asm-commons:7.0'

    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8')
    implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8')

    // Logger
    implementation 'org.slf4j:slf4j-log4j12:1.7.25'

    // Test
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.11.1'
}

compileKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_12
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_12
    }
}

// Jar
jar {
    manifest {
        attributes("Implementation-Version": version)
    }
}

jar { enabled = true }

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = "sources"
    manifest {
        attributes(
                "Implementation-Version": version,
                'Created-By': "Gradle ${gradle.gradleVersion}",
                'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
        )
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from "build/docs/javadoc"
}

artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

if (project.hasProperty("sign")) {
    signing {
        sign configurations.archives
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: '${OSSRHUSERNAME}', password: '${OSSRHPASSWORD}')
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: '${OSSRHUSERNAME}', password: '${OSSRHPASSWORD}')
            }

            pom.project {
                name "open-chain-kotlin-sdk"
                packaging "jar"
                url "https://github.com/OpenFuturePlatform/open-chain-kotlin-sdk"
                description "OPEN Platform Kotlin SDK"

                licenses {
                    license {
                        name "MIT licence"
                        url "https://github.com/OpenFuturePlatform/open-chain-kotlin-sdk/blob/master/LICENCE.txt"
                    }
                }

                scm {
                    url "https://github.com/OpenFuturePlatform/open-chain-kotlin-sdk"
                }

                developers {
                    developer {
                        id "openplatform"
                        name "OPEN Platform"
                    }
                }
            }
        }
    }
}

nexusStaging {
    numberOfRetries = 40
    delayBetweenRetriesInMillis = 8000
}